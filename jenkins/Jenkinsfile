String devVersion = "0"
String testVersion = "0.1"
String qaVersion = "0.1.0"
def appName = "springboot-sample-app"
def project = ""
def pom
node {
    stage("Initialize") {
        project = env.PROJECT_NAME
    }
}
node("maven") {
    stage("Checkout") {
        git url: "http://gogs:3000/gogs/springboot-sample-app.git", branch: "cicd-sample"
    }
    stage("Gather buildfacts") {
        pom = readMavenPom file: 'pom.xml'
    }
    stage("Build JAR") {
        sh "mvn clean package -Popenshift"
        stash name: "jar", includes: "target/app.jar"
    }
}

node {
    stage("Build Image") {
        unstash name: "jar"
        sh "oc start-build ${appName}-docker --from-file=target/app.jar --follow -n ${project}"
    }
    stage("Tag image with version " + pom.version) {
        String version = pom.version
        String[] versionSplit = version.tokenize('.')
        String v = versionSplit[0]
        openshiftTag srcStream: appName, srcTag: "latest", destStream: appName, destTag: v, alias: "false"
        for (int i = 1; i < versionSplit.length; i++) {
            v += "." + versionSplit[i]
            openshiftTag srcStream: appName, srcTag: "" +
                    "latest", destStream: appName, destTag: v, alias: "false"
        }
    }
    stage("Set auto deploying of version " + devVersion + " to dev") {
        sh "oc process springboot-deployment -n cicd APP_NAME=${appName} IMAGE_TAG=0 | oc apply -f - -n dev"
        openshiftTag srcStream: appName, srcTag: devVersion, namespace: project, destStream: appName, destTag: "0", destinationNamespace: "dev", alias: false
        openshiftVerifyDeployment depCfg: appName, namespace: "dev"
    }
    stage("Deploying version " + testVersion + " to test") {
        sh "oc process springboot-deployment -n cicd APP_NAME=${appName} IMAGE_TAG=test | oc apply -f - -n test"
        openshiftTag srcStream: appName, srcTag: testVersion, namespace: project, destStream: appName, destTag: "test", destinationNamespace: "test", alias: false
        openshiftVerifyDeployment depCfg: appName, namespace: "test"
    }
    stage("Deploying version " + qaVersion + " to qa") {
        //timeout(time: 5, unit: 'MINUTES') {
        //    input message: "Deploy version 0.1 to QA?", ok: "GO man, GO!"
        //}
        sh "oc process springboot-deployment -n cicd APP_NAME=${appName} IMAGE_TAG=qa | oc apply -f - -n qa"
        openshiftTag srcStream: appName, srcTag: qaVersion, namespace: project, destStream: appName, destTag: "qa", destinationNamespace: "qa", alias: false
        openshiftVerifyDeployment depCfg: appName, namespace: "qa"
    }
}